#!/bin/bash

# Coded by: vincenzogianfelice <developer.vincenzog@gmail.com>
# View my github at https://github.com/vincenzogianfelice
# My site: https://vincenzogianfelice.altervista.org

set -o noclobber

########################
API=''  # INSERT YOUR API BEETWEN ' '. (eg.) API='saadljhniu2y78yinh21iuh21nyh2112....'
########################
VENDOR_SITE='https://api.macvendors.com'

count=0
if [ -d "/etc/macfinder/lib" ]; then
	MAC_VENDOR_FILE='/etc/macfinder/lib/oui'
else
	MAC_VENDOR_FILE='lib/oui'
fi
MAC=()
VENDOR=()
INFORMATION=()
HEADER="Mac|Vendor|Organizzation|Address|Country"
FILE_MAC=""
DISABLE_SEARCH_ONLINE=0
FORCE_ONLY_ONLINE=0
LONG_INFORMATION=0
NOT_PRINT_NOT_FOUND=0
PRINT_ONLY_VENDOR=0
PRINT_RAW=0
ONLY_COUNTRY=0
ONLY_ADDRESS=0
ONLY_ORG=0

function help() {
cat << "EOF"
 __  __    _    ____   _____ _           _           
|  \/  |  / \  / ___| |  ___(_)_ __   __| | ___ _ __ 
| |\/| | / _ \| |     | |_  | | '_ \ / _` |/ _ \ '__|
| |  | |/ ___ \ |___  |  _| | | | | | (_| |  __/ |   
|_|  |_/_/   \_\____| |_|   |_|_| |_|\__,_|\___|_|   
EOF
   echo ""
   echo ""
   echo " Usage: $0 [ -m MAC -m MAC2 -m MAC3 ... | -f <file> ]"
   echo ""
   echo " Options:"
   echo "	-f <file>    File MAC's"
   echo "	-m           MAC to search"
   echo "	-d	     Disable search online if search have not result (Default Enabled)"
   echo "	--force	     Force search only online"
   echo "		     (1 request / second for 1000 Request/day FREE PLANS (view https://macvendors.com/plans))"
   echo "	-V	     Print only MAC Vendor" 
   echo "	-R	     Print in RAW format"
   echo "		     (Es.) \"001122	MAC Vendor\" (The separator is one tab)"
   echo "	-N	     Not printing if Vendor search have not result"
   echo "	-h	     View help"
   echo ""
   echo " Long Information:"
   echo "	-l	     Long information"
   echo "	--country    Print only country"
   echo "	--address    Print only adrress"
   echo "	--org	     Print only organization"
   echo ""
   echo " Format MAC Accepted:"
   echo ""
   echo "   11:22:33:44:55:66 or 11:22:33	Long and short format"
   echo "   11-22-33-44-55-66 or 11-22-33	Long and short format"
   echo "   112233 or 112233445566		Short and long format"
   echo ""
}

function parse_mac() {
	index="$1"

	if echo "${MAC[$index]}" | grep -q -iE '^[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}$|^[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}$'; then
		MAC[$index]="$(echo "${MAC[$index]}" | sed 's/://g' | cut -c 1-6)"
	elif echo "${MAC[$index]}" | grep -q -iE '^[0-9a-f]{2}-[0-9a-f]{2}-[0-9a-f]{2}$|^[0-9a-f]{2}-[0-9a-f]{2}-[0-9a-f]{2}-[0-9a-f]{2}-[0-9a-f]{2}-[0-9a-f]{2}$'; then
		MAC[$index]="$(echo "${MAC[$index]}" | sed 's/-//g' | cut -c 1-6)"
	elif echo "${MAC[$index]}" | grep -q -iE '^[0-9a-f]{6}$|^[0-9a-f]{12}$'; then
		MAC[$index]="$(echo "${MAC[$index]}" | cut -c 1-6)"
	else
		echo "Errore: Vedi il formato del MAC digitando "$0 -h"" >&2
		exit 1
	fi
}

function retrieve_mac_vendor() {
	# Parse MAC
	for ((i=0; i<$count; i++)); do
		parse_mac $i
	done

	if [[ $DISABLE_SEARCH_ONLINE -eq 1 ]]; then
		for ((i=0; i<$count; i++)); do
			VENDOR[$i]="$(grep -i "${MAC[$i]}" "$MAC_VENDOR_FILE/oui.txt" | tr -s '\t' '\t' | awk 'BEGIN { FS="\t" } { print $2 }')"

			if [ -z "${VENDOR[$i]}" ]; then
				VENDOR[$i]="Not Found"
			fi
		done
		return 0
	else
		CURL_COMMAND="curl --fail --silent"
		if [ ! -z "$API" ]; then
			# Check API
			if curl --silent $VENDOR_SITE/v1/lookup/TEST -H "Authorization: Bearer $API" -H "Accept: text/plain" | grep -q -i 'Unauthorized'; then
				echo "Errore: API Incorrect!" >&2
				exit 1
			fi

			CURL_COMMAND="curl --fail --silent -H \"Authorization: Bearer $API\" -H \"Accept: text/plain\""
			VENDOR_SITE="${VENDOR_SITE}/v1/lookup"
		fi

		# Search Online
		# 1 request / second for 1000 Request/day FREE PLANS (view https://macvendors.com/plans)
		if [[ $FORCE_ONLY_ONLINE -eq 1 ]]; then
			for ((i=0; i<$count; i++)); do
			  	VENDOR[$i]="$(eval $CURL_COMMAND $VENDOR_SITE/${MAC[$i]})"

				if [ -z "${VENDOR[$i]}" ]; then
					VENDOR[$i]="Not Found"
				fi
			done
			return 0
		fi

		for ((i=0; i<$count; i++)); do
			VENDOR[$i]="$(grep -iE "^${MAC[$i]}" $MAC_VENDOR_FILE/oui.txt | tr -s '\t' '\t' | awk 'BEGIN { FS="\t" } { print $2 }')"

			if [ -z "${VENDOR[$i]}" ]; then
			  	VENDOR[$i]="$(eval $CURL_COMMAND $VENDOR_SITE/${MAC[$i]})"

				if [ -z "${VENDOR[$i]}" ]; then
					VENDOR[$i]="Not Found"
				fi
			fi
		done
	fi
}

function long_information() {
	for ((i=0; i<$count; i++)); do
		FOUND="$(grep -i "^${MAC[$i]}" $MAC_VENDOR_FILE/address_organizzation.txt | awk 'BEGIN{FS="\t"}{ print $2 }')"

		if [ ! -z "$FOUND" ]; then
			ORGANIZZATION="$(echo "$FOUND" | awk 'BEGIN{FS="|"}{print $1}')"
			ADDRESS="$(echo "$FOUND" | awk 'BEGIN{FS="|"}{print $2}')"
			COUNTRY="$(echo "$FOUND" | awk 'BEGIN{FS="|"}{print $3}')"

			INFORMATION[$i]="$ORGANIZZATION|$ADDRESS|$COUNTRY"
		else
			INFORMATION[$i]="Not Found Data"
		fi
	done
}

function assembler() {
	if [[ $LONG_INFORMATION -eq 1 ]]; then
		long_information
	fi

	CONTENT="${MAC[0]}|${VENDOR[0]}|${INFORMATION[0]}"
	for ((i=1; i<$count; i++)); do
		CONTENT="$CONTENT\n${MAC[$i]}|${VENDOR[$i]}|${INFORMATION[$i]}"
	done
}

function output_data() {
	assembler

	if [[ $NOT_PRINT_NOT_FOUND -eq 1 ]]; then
		CONTENT="$(echo -e "$CONTENT" | grep -v 'Not Found')"
	fi

	if [ ! -z "$CONTENT" ]; then
		if [[ $LONG_INFORMATION -eq 1 ]]; then
			if [[ $ONLY_COUNTRY -eq 1 ]]; then
				echo -e "$HEADER\n$CONTENT" | awk 'BEGIN{ FS="|" }{print $1"|"$2"|"$5}' | column -s"|" -t
				return 0
			fi
			if [[ $ONLY_ADDRESS -eq 1 ]]; then
				echo -e "$HEADER\n$CONTENT" | awk 'BEGIN{ FS="|" }{print $1"|"$2"|"$4}' | column -s"|" -t
				return 0
			fi
			if [[ $ONLY_ORG -eq 1 ]]; then
				echo -e "$HEADER\n$CONTENT" | awk 'BEGIN{ FS="|" }{print $1"|"$2"|"$3}' | column -s"|" -t
				return 0
			fi

			echo -e "$HEADER\n$CONTENT" | column -s"|" -t
			return 0
		fi
		if [[ $PRINT_ONLY_VENDOR -eq 1 ]]; then
			echo -e "$CONTENT" | cut -d"|" -f 2
			return 0
		fi
		if [[ $PRINT_RAW -eq 1 ]]; then
			echo -e "$CONTENT" | sed 's/|/\t/; s/|$//'
			return 0
		fi

		echo -e "$CONTENT" | awk 'BEGIN { FS="|" } { printf("MAC(%s) = %s\n",$1,$2) }'
	fi
}

if ! command -v curl &>/dev/null; then
	echo "Errore: A quanto pare manca il comando 'curl'." >&2
	exit 1
fi

if [ ! -f "$MAC_VENDOR_FILE/oui.txt" ]; then
	echo "Errore: Impossibile trovare il file '$MAC_VENDOR_FILE/oui.txt'" >&2
	exit 1
fi

if [[ $# -lt 1 ]]; then
	help
	exit 1
fi
while getopts "m:f:dNVRlh-:" arg; do
	case "$arg" in
		h)
			help
			exit 0
			;;
		m)
			MAC[$count]="$OPTARG"
			count=$((count+1))
			;;
		f)
			FILE_MAC="$OPTARG"
			if [ ! -f "$FILE_MAC" ]; then
				echo "Errore: Il file '$FILE_MAC' non esiste" >&2
				exit 1
			fi

			if [ ! -z "$FILE_MAC" ]; then
				while read -r mac; do
					MAC[$count]="$mac"
					count="$((count+1))"
				done < "$FILE_MAC"
			fi
			;;
		l)
			LONG_INFORMATION=1
			;;
		d)
			DISABLE_SEARCH_ONLINE=1
			;;
		V)
			PRINT_ONLY_VENDOR=1
			;;
		N)
			NOT_PRINT_NOT_FOUND=1
			;;
		R)
			PRINT_RAW=1
			;;
		-)
			case "$OPTARG" in
				force)
					FORCE_ONLY_ONLINE=1
					;;
				country)
					$optspec
					ONLY_COUNTRY=1
					;;
				address)
					ONLY_ADDRESS=1
					;;
				org)
					ONLY_ORG=1
					;;
				*|?)
					echo "$0: opzione illecita -- --$OPTARG" >&2
					exit 1
					;;
			esac
			;;
		*|?)
			exit 1
			;;
	esac
done
shift "$((OPTIND-1))"
if [[ $OPTIND -eq 1 ]]; then
	help
	exit 1
fi

if [[ ${#MAC[@]} -eq 0 ]]; then
	echo "Errore: Nessun MAC Address inserito" >&2
	exit 1
fi

retrieve_mac_vendor
output_data

exit 0
